diff --git a/include/bvh.cuh b/include/bvh.cuh
index 0ee3b38..7465294 100644
--- a/include/bvh.cuh
+++ b/include/bvh.cuh
@@ -14,6 +14,7 @@
 #include <thrust/for_each.h>
 #include <thrust/transform.h>
 #include <thrust/reduce.h>
+#include <thrust/unique.h>
 #include <thrust/iterator/constant_iterator.h>
 #include <thrust/iterator/counting_iterator.h>
 #include <thrust/execution_policy.h>
@@ -168,7 +169,7 @@ void construct_internal_nodes(const basic_device_bvh<Real, Object, IsConst>& sel
     thrust::for_each(thrust::device,
         thrust::make_counting_iterator<unsigned int>(0),
         thrust::make_counting_iterator<unsigned int>(num_objects - 1),
-        [self, node_code, num_objects] __device__ (const unsigned int idx)
+        [self, node_code, num_objects] __device__ (const unsigned int idx) -> void
         {
             self.nodes[idx].object_idx = 0xFFFFFFFF; //  internal nodes
 
@@ -311,7 +312,7 @@ class bvh
 
         const auto aabb_whole = thrust::reduce(
             aabbs_.begin() + num_internal_nodes, aabbs_.end(), default_aabb,
-            [] __device__ (const aabb_type& lhs, const aabb_type& rhs) {
+            [] __device__ (const aabb_type& lhs, const aabb_type& rhs) -> aabb_type {
                 return merge(lhs, rhs);
             });
 
@@ -345,7 +346,7 @@ class bvh
         {
             thrust::transform(morton.begin(), morton.end(), indices.begin(),
                 morton64.begin(),
-                [] __device__ (const unsigned int m, const unsigned int idx)
+                [] __device__ (const unsigned int m, const unsigned int idx) -> unsigned long long
                 {
                     unsigned long long int m64 = m;
                     m64 <<= 32;
@@ -366,7 +367,7 @@ class bvh
 
         thrust::transform(indices.begin(), indices.end(),
             this->nodes_.begin() + num_internal_nodes,
-            [] __device__ (const index_type idx)
+            [] __device__ (const index_type idx) -> node_type
             {
                 node_type n;
                 n.parent_idx = 0xFFFFFFFF;
@@ -400,7 +401,7 @@ class bvh
         thrust::for_each(thrust::device,
             thrust::make_counting_iterator<index_type>(num_internal_nodes),
             thrust::make_counting_iterator<index_type>(num_nodes),
-            [self, flags] __device__ (index_type idx)
+            [self, flags] __device__ (index_type idx) -> void
             {
                 unsigned int parent = self.nodes[idx].parent_idx;
                 while(parent != 0xFFFFFFFF) // means idx == 0
