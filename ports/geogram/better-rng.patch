diff --git a/src/lib/geogram/basic/numeric.cpp b/src/lib/geogram/basic/numeric.cpp
index ddb5abf7f..6904dc8be 100644
--- a/src/lib/geogram/basic/numeric.cpp
+++ b/src/lib/geogram/basic/numeric.cpp
@@ -44,10 +44,12 @@
 #pragma GCC diagnostic ignored "-Wc++11-long-long"
 #endif
 
+#include <random>
+
 namespace GEO {
 
     namespace Numeric {
-
+        static std::mt19937 g_rng;
         bool is_nan(float32 x) {
 #ifdef GEO_COMPILER_MSVC
             return _isnan(x) || !_finite(x);	    
@@ -65,47 +67,19 @@ namespace GEO {
         }
 
         void random_reset() {
-#ifdef GEO_OS_WINDOWS
-            srand(1);
-#else
-            srandom(1);
-#endif
+            g_rng = {};
         }
 
         int32 random_int32() {
-#ifdef GEO_OS_WINDOWS
-            return rand();
-#else
-            return int32(random() % std::numeric_limits<int32>::max());
-#endif
+            return std::uniform_int_distribution<int32>(0, RAND_MAX)(g_rng);
         }
 
         float32 random_float32() {
-#if defined(GEO_OS_WINDOWS)
-            return float(rand()) / float(RAND_MAX);
-#elif defined(GEO_OS_ANDROID)
-            // TODO: find a way to call drand48()
-            // (problem at link time)
-            return
-                float(random_int32()) /
-                float(std::numeric_limits<int32>::max());
-#else
-            return float(drand48());
-#endif
+            return std::uniform_real_distribution<float>(0, 1)(g_rng);
         }
 
         float64 random_float64() {
-#if defined(GEO_OS_WINDOWS)
-            return double(rand()) / double(RAND_MAX);
-#elif defined(GEO_OS_ANDROID)
-            // TODO: find a way to call drand48()
-            // (problem at link time)
-            return
-                double(random_int32()) /
-                double(std::numeric_limits<int32>::max());
-#else
-            return double(drand48());
-#endif
+            return std::uniform_real_distribution<double>(0, 1)(g_rng);
         }
     }
 }
