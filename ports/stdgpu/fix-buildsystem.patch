diff --git a/src/stdgpu/impl/iterator_detail.h b/src/stdgpu/impl/iterator_detail.h
index 7447dd9..eea7690 100644
--- a/src/stdgpu/impl/iterator_detail.h
+++ b/src/stdgpu/impl/iterator_detail.h
@@ -387,24 +387,33 @@ inserter(Container& c)
 
 } // namespace stdgpu
 
+#ifdef THRUST_NAMESPACE_BEGIN
+THRUST_NAMESPACE_BEGIN
+namespace detail
+#else
 namespace thrust::detail
+#endif
 {
 
 template <typename Container>
-struct is_proxy_reference<stdgpu::detail::back_insert_iterator_proxy<Container>> : public thrust::detail::true_type
+struct is_proxy_reference<stdgpu::detail::back_insert_iterator_proxy<Container>> : public true_type
 {
 };
 
 template <typename Container>
-struct is_proxy_reference<stdgpu::detail::front_insert_iterator_proxy<Container>> : public thrust::detail::true_type
+struct is_proxy_reference<stdgpu::detail::front_insert_iterator_proxy<Container>> : public true_type
 {
 };
 
 template <typename Container>
-struct is_proxy_reference<stdgpu::detail::insert_iterator_proxy<Container>> : public thrust::detail::true_type
+struct is_proxy_reference<stdgpu::detail::insert_iterator_proxy<Container>> : public true_type
 {
 };
-
+#ifdef THRUST_NAMESPACE_END
+} //namespace detail
+THRUST_NAMESPACE_END
+#else
 } // namespace thrust::detail
+#endif
 
 #endif // STDGPU_ITERATORDETAIL_H
diff --git a/src/stdgpu/impl/memory_detail.h b/src/stdgpu/impl/memory_detail.h
index 4445152..5c9c17d 100644
--- a/src/stdgpu/impl/memory_detail.h
+++ b/src/stdgpu/impl/memory_detail.h
@@ -65,7 +65,7 @@ public:
     STDGPU_HOST_DEVICE void
     operator()(const index64_t i)
     {
-        construct_at(to_address(_begin + i), _value);
+        construct_at(stdgpu::to_address(_begin + i), _value);
     }
 
 private:
@@ -88,7 +88,7 @@ public:
     {
         // Directly dereference _begin instead of trying to get its raw pointer.
         // This adds support for transform_iterator, etc. which neither have operator->() nor get().
-        construct_at(to_address(_output_begin + i), _begin[i]);
+        construct_at(stdgpu::to_address(_output_begin + i), _begin[i]);
     }
 
 private:
@@ -108,7 +108,7 @@ public:
     STDGPU_HOST_DEVICE void
     operator()(const index64_t i)
     {
-        destroy_at(to_address(_first + i));
+        destroy_at(stdgpu::to_address(_first + i));
     }
 
 private:
@@ -699,7 +699,7 @@ template <typename Ptr, STDGPU_DETAIL_OVERLOAD_DEFINITION_IF(detail::has_arrow_o
 STDGPU_HOST_DEVICE auto
 to_address(const Ptr& p) noexcept
 {
-    return to_address(p.operator->());
+    return stdgpu::to_address(p.operator->());
 }
 
 template <typename Ptr,
@@ -707,7 +707,7 @@ template <typename Ptr,
 STDGPU_HOST_DEVICE auto
 to_address(const Ptr& p) noexcept
 {
-    return to_address(p.get());
+    return stdgpu::to_address(p.get());
 }
 
 template <typename T, typename... Args>
diff --git a/src/stdgpu/impl/unordered_base_detail.cuh b/src/stdgpu/impl/unordered_base_detail.cuh
index 109e072..71d2076 100644
--- a/src/stdgpu/impl/unordered_base_detail.cuh
+++ b/src/stdgpu/impl/unordered_base_detail.cuh
@@ -472,7 +472,7 @@ public:
     STDGPU_DEVICE_ONLY void
     operator()(const index_t i)
     {
-        _base.insert(*to_address(_begin + i));
+        _base.insert(*stdgpu::to_address(_begin + i));
     }
 
 private:
diff --git a/src/stdgpu/utility.h b/src/stdgpu/utility.h
index 04c2afa..af0ae03 100644
--- a/src/stdgpu/utility.h
+++ b/src/stdgpu/utility.h
@@ -127,6 +127,14 @@ struct pair
               STDGPU_DETAIL_OVERLOAD_IF(std::is_constructible_v<T1, U1>&& std::is_constructible_v<T2, U2>)>
     constexpr STDGPU_HOST_DEVICE
     pair(const pair<U1, U2>&& p); // NOLINT(hicpp-explicit-conversions)
+    
+    template <class U1,
+            class U2,
+            STDGPU_DETAIL_OVERLOAD_IF(std::is_constructible_v<T1, U1>&& std::is_constructible_v<T2, U2>)>
+    constexpr STDGPU_HOST_DEVICE
+    pair(const thrust::pair<U1, U2> &p) : pair(p.first,p.second) {
+        
+    }
 
     /**
      * \brief Default copy constructor